#!/usr/bin/python
# -*- coding: utf-8 -*-

import requests
from server.models import Plotter

class PlotterAPI(object):
    def __init__(self, plotter):
        self._plotter = plotter
        self._host = plotter.api_host
        self._port = plotter.api_port

    def restart_service(self, service_name):
        """
        restart service srv.plotter srv.hpool etc
        :param service_name:
        :return:
        """
        query = {'service_name': service_name}
        response = requests.get('http://%s:%s/service/restart' % (self._host, self._port), params=query)

        return response.json()

    def apply_plot_config(self):
        """
        generate plot config and restart srv.plot
        :return:
        """
        response = requests.get('http://%s:%s/config/plotman/apply' % (self._host, self._port))
        return response.json()

    def update_system(self):
        """
        update plotter system
        :return:
        """
        response = requests.get('http://%s:%s/update' % (self._host, self._port))
        return response.json()

    def start_sending_process(self, harvester):
        """
        start sending process
        scan plot generated by plotter, and send to the destination
        :return:
        """
        query = {'nas_ip': harvester.data_tx_ip, 'nas_name': harvester.server_name()}
        response = requests.get('http://%s:%s/plot/sending/start' % (self._host, self._port), params=query)
        return response.json()

    def stop_sending_process(self):
        """
        stop sending process
        :return:
        """
        response = requests.get('http://%s:%s/plot/sending/stop' % (self._host, self._port))
        return response.json()

    def set_nas_ip(self,nas_ip):
        """
        set nas ip, plotter will send plot to
        :param nas_ip:
        :return:
        """
        query = {'nas_ip': nas_ip}
        response = requests.get('http://%s:%s/plot/sending/stop' % (self._host, self._port), params=query)
        return response.json()

    def shutdown(self):
        """
        shutdown
        :param:
        :return:
        """
        response = requests.get('http://%s:%s/system/shutdown' % (self._host, self._port))
        return response.json()